{
  "address": "0x2C3c9c4870609A88106481Ca5898208b726530C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forgedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "forgeType",
          "type": "string"
        }
      ],
      "name": "TokenForged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenTraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forgeToken3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forgeToken4",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forgeToken5",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forgeToken6",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContract",
      "outputs": [
        {
          "internalType": "contract IForgeableERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenToTrade",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenId",
          "type": "uint256"
        }
      ],
      "name": "tradeForBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x221595f196def990233589fa16b60fc66162b36de4edb7d55a95103114653ad5",
  "receipt": {
    "to": null,
    "from": "0x37953322dee59C458Ca7B570EC17C867fD82A5E0",
    "contractAddress": "0x2C3c9c4870609A88106481Ca5898208b726530C8",
    "transactionIndex": 107,
    "gasUsed": "1210267",
    "logsBloom": "0x
    "blockHash": "0xa2c6e1cf51aca764162a1444ca86a6818258878dff8e870c83b2daa21eaa1ba3",
    "transactionHash": "0x221595f196def990233589fa16b60fc66162b36de4edb7d55a95103114653ad5",
    "logs": [],
    "blockNumber": 7829101,
    "cumulativeGasUsed": "13361155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB8bdf234e02a03f50e9B3E8295308765af87f6c6"
  ],
  "numDeployments": 4,
  "solcInputHash": "cbbed0f06fdb765b7feefcc446a44642",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forgedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"forgeType\",\"type\":\"string\"}],\"name\":\"TokenForged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenId\",\"type\":\"uint256\"}],\"name\":\"TokenTraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgeToken3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgeToken4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgeToken5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgeToken6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IForgeableERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenId\",\"type\":\"uint256\"}],\"name\":\"tradeForBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenForge.sol\":\"TokenForge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/TokenForge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IForgeableERC1155 {\\n    function forgeMint(address to, uint256 tokenId, uint256 amount) external;\\n    function forgeMintBatch(address to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n    function forgeBurn(address from, uint256 tokenId, uint256 amount) external;\\n    function forgeBurnBatch(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n}\\n\\ncontract TokenForge is ReentrancyGuard {\\n    IForgeableERC1155 public tokenContract;\\n\\n    // --- EVENTS ---\\n    event TokenForged(address indexed user, uint256 forgedTokenId, string forgeType);\\n    event TokenTraded(address indexed user, uint256 tradedTokenId, uint256 baseTokenId);\\n    event TokenBurned(address indexed user, uint256 burnedTokenId, uint256 amount);\\n\\n    constructor(address _tokenContract) {\\n        tokenContract = IForgeableERC1155(_tokenContract);\\n    }\\n\\n    // Forge Token 3\\n    function forgeToken3() external nonReentrant {\\n        require(tokenContract.balanceOf(msg.sender, 0) >= 1, \\\"Insufficient token 0\\\");\\n        require(tokenContract.balanceOf(msg.sender, 1) >= 1, \\\"Insufficient token 1\\\");\\n\\n        uint256[] memory burnIds = new uint256[](2);\\n        uint256[] memory burnAmounts = new uint256[](2);\\n        burnIds[0] = 0; burnIds[1] = 1;\\n        burnAmounts[0] = 1; burnAmounts[1] = 1;\\n\\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\\n        tokenContract.forgeMint(msg.sender, 3, 1);\\n        emit TokenForged(msg.sender, 3, \\\"forge3\\\");\\n    }\\n\\n    // Forge Token 4\\n    function forgeToken4() external nonReentrant {\\n        require(tokenContract.balanceOf(msg.sender, 1) >= 1, \\\"Insufficient token 1\\\");\\n        require(tokenContract.balanceOf(msg.sender, 2) >= 1, \\\"Insufficient token 2\\\");\\n\\n        uint256[] memory burnIds = new uint256[](2);\\n        uint256[] memory burnAmounts = new uint256[](2);\\n        burnIds[0] = 1; burnIds[1] = 2;\\n        burnAmounts[0] = 1; burnAmounts[1] = 1;\\n\\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\\n        tokenContract.forgeMint(msg.sender, 4, 1);\\n        emit TokenForged(msg.sender, 4, \\\"forge4\\\");\\n    }\\n\\n    // Forge Token 5\\n    function forgeToken5() external nonReentrant {\\n        require(tokenContract.balanceOf(msg.sender, 0) >= 1, \\\"Insufficient token 0\\\");\\n        require(tokenContract.balanceOf(msg.sender, 2) >= 1, \\\"Insufficient token 2\\\");\\n\\n        uint256[] memory burnIds = new uint256[](2);\\n        uint256[] memory burnAmounts = new uint256[](2);\\n        burnIds[0] = 0; burnIds[1] = 2;\\n        burnAmounts[0] = 1; burnAmounts[1] = 1;\\n\\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\\n        tokenContract.forgeMint(msg.sender, 5, 1);\\n        emit TokenForged(msg.sender, 5, \\\"forge5\\\");\\n    }\\n\\n    // Forge Token 6\\n    function forgeToken6() external nonReentrant {\\n        require(tokenContract.balanceOf(msg.sender, 0) >= 1, \\\"Insufficient token 0\\\");\\n        require(tokenContract.balanceOf(msg.sender, 1) >= 1, \\\"Insufficient token 1\\\");\\n        require(tokenContract.balanceOf(msg.sender, 2) >= 1, \\\"Insufficient token 2\\\");\\n\\n        uint256[] memory burnIds = new uint256[](3);\\n        uint256[] memory burnAmounts = new uint256[](3);\\n        burnIds[0] = 0; burnIds[1] = 1; burnIds[2] = 2;\\n        burnAmounts[0] = 1; burnAmounts[1] = 1; burnAmounts[2] = 1;\\n\\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\\n        tokenContract.forgeMint(msg.sender, 6, 1);\\n        emit TokenForged(msg.sender, 6, \\\"forge6\\\");\\n    }\\n\\n    // Trade any token for a base token (0-2)\\n    function tradeForBase(uint256 tokenToTrade, uint256 baseTokenId) external nonReentrant {\\n        require(baseTokenId <= 2, \\\"Can only trade for tokens 0-2\\\");\\n        require(tokenContract.balanceOf(msg.sender, tokenToTrade) >= 1, \\\"Insufficient token to trade\\\");\\n\\n        tokenContract.forgeBurn(msg.sender, tokenToTrade, 1);\\n        tokenContract.forgeMint(msg.sender, baseTokenId, 1);\\n        emit TokenTraded(msg.sender, tokenToTrade, baseTokenId);\\n    }\\n\\n    // Direct burn function for tokens [3\\u20136] for nothing\\n    function burnToken(uint256 tokenId, uint256 amount) external nonReentrant {\\n        require(tokenId >= 3 && tokenId <= 6, \\\"Only tokens 3-6 can be burned directly\\\");\\n        require(tokenContract.balanceOf(msg.sender, tokenId) >= amount, \\\"Insufficient tokens to burn\\\");\\n\\n        tokenContract.forgeBurn(msg.sender, tokenId, amount);\\n        emit TokenBurned(msg.sender, tokenId, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x652f356852dc4c14a38ede693276a6fac82c988a358f6e87030afb36b3b10037\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516114ae3803806114ae83398101604081905261002f91610059565b6001600081905580546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b611416806100986000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806355a373d61161005b57806355a373d61461009c578063796debfc146100cb5780638225b247146100d3578063e874a67b146100e657600080fd5b8063122b95cc146100825780633413ea131461008c5780634d5b937b14610094575b600080fd5b61008a6100f9565b005b61008a61041e565b61008a610725565b6001546100af906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61008a610b00565b61008a6100e1366004611230565b610e05565b61008a6100f4366004611230565b610fe9565b610101611206565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e90610133903390600090600401611252565b602060405180830381865afa158015610150573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610174919061126b565b101561019b5760405162461bcd60e51b815260040161019290611284565b60405180910390fd5b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e906101cc9033908590600401611252565b602060405180830381865afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d919061126b565b101561022b5760405162461bcd60e51b8152600401610192906112b2565b604080516002808252606082018352600092602083019080368337505060408051600280825260608201835293945060009390925090602083019080368337019050509050600082600081518110610285576102856112e0565b6020026020010181815250506001826001815181106102a6576102a66112e0565b6020026020010181815250506001816000815181106102c7576102c76112e0565b6020026020010181815250506001816001815181106102e8576102e86112e0565b6020908102919091010152600154604051634522658160e01b81526001600160a01b039091169063452265819061032790339086908690600401611331565b600060405180830381600087803b15801561034157600080fd5b505af1158015610355573d6000803e3d6000fd5b505060018054604051635567843160e11b81526001600160a01b03909116935063aacf0862925061038e91339160039190600401611371565b600060405180830381600087803b1580156103a857600080fd5b505af11580156103bc573d6000803e3d6000fd5b50505050336001600160a01b03166000805160206113c1833981519152600360405161040891815260406020820181905260069082015265666f7267653360d01b606082015260800190565b60405180910390a2505061041c6001600055565b565b610426611206565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e90610458903390600090600401611252565b602060405180830381865afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610499919061126b565b10156104b75760405162461bcd60e51b815260040161019290611284565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e906104e9903390600290600401611252565b602060405180830381865afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a919061126b565b10156105485760405162461bcd60e51b815260040161019290611392565b6040805160028082526060820183526000926020830190803683375050604080516002808252606082018352939450600093909250906020830190803683370190505090506000826000815181106105a2576105a26112e0565b6020026020010181815250506002826001815181106105c3576105c36112e0565b6020026020010181815250506001816000815181106105e4576105e46112e0565b602002602001018181525050600181600181518110610605576106056112e0565b6020908102919091010152600154604051634522658160e01b81526001600160a01b039091169063452265819061064490339086908690600401611331565b600060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505060018054604051635567843160e11b81526001600160a01b03909116935063aacf086292506106ab91339160059190600401611371565b600060405180830381600087803b1580156106c557600080fd5b505af11580156106d9573d6000803e3d6000fd5b50505050336001600160a01b03166000805160206113c1833981519152600560405161040891815260406020820181905260069082015265666f7267653560d01b606082015260800190565b61072d611206565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e9061075f903390600090600401611252565b602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a0919061126b565b10156107be5760405162461bcd60e51b815260040161019290611284565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e906107ef9033908590600401611252565b602060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610830919061126b565b101561084e5760405162461bcd60e51b8152600401610192906112b2565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e90610880903390600290600401611252565b602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c1919061126b565b10156108df5760405162461bcd60e51b815260040161019290611392565b604080516003808252608082019092526000916020820160608036833750506040805160038082526080820190925292935060009291506020820160608036833701905050905060008260008151811061093b5761093b6112e0565b60200260200101818152505060018260018151811061095c5761095c6112e0565b60200260200101818152505060028260028151811061097d5761097d6112e0565b60200260200101818152505060018160008151811061099e5761099e6112e0565b6020026020010181815250506001816001815181106109bf576109bf6112e0565b6020026020010181815250506001816002815181106109e0576109e06112e0565b6020908102919091010152600154604051634522658160e01b81526001600160a01b0390911690634522658190610a1f90339086908690600401611331565b600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505060018054604051635567843160e11b81526001600160a01b03909116935063aacf08629250610a8691339160069190600401611371565b600060405180830381600087803b158015610aa057600080fd5b505af1158015610ab4573d6000803e3d6000fd5b50505050336001600160a01b03166000805160206113c18339815191526006604051610408918152604060208201819052600690820152653337b933b29b60d11b606082015260800190565b610b08611206565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e90610b399033908590600401611252565b602060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a919061126b565b1015610b985760405162461bcd60e51b8152600401610192906112b2565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e90610bca903390600290600401611252565b602060405180830381865afa158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b919061126b565b1015610c295760405162461bcd60e51b815260040161019290611392565b604080516002808252606082018352600092602083019080368337505060408051600280825260608201835293945060009390925090602083019080368337019050509050600182600081518110610c8357610c836112e0565b602002602001018181525050600282600181518110610ca457610ca46112e0565b602002602001018181525050600181600081518110610cc557610cc56112e0565b602002602001018181525050600181600181518110610ce657610ce66112e0565b6020908102919091010152600154604051634522658160e01b81526001600160a01b0390911690634522658190610d2590339086908690600401611331565b600060405180830381600087803b158015610d3f57600080fd5b505af1158015610d53573d6000803e3d6000fd5b505060018054604051635567843160e11b81526001600160a01b03909116935063aacf08629250610d8b913391600491908201611371565b600060405180830381600087803b158015610da557600080fd5b505af1158015610db9573d6000803e3d6000fd5b50505050336001600160a01b03166000805160206113c1833981519152600460405161040891815260406020820181905260069082015265199bdc99d94d60d21b606082015260800190565b610e0d611206565b60038210158015610e1f575060068211155b610e7a5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920746f6b656e7320332d362063616e206265206275726e6564206469604482015265726563746c7960d01b6064820152608401610192565b600154604051627eeac760e11b815282916001600160a01b03169062fdd58e90610eaa9033908790600401611252565b602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb919061126b565b1015610f395760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420746f6b656e7320746f206275726e00000000006044820152606401610192565b60015460405163755f0f6160e11b81526001600160a01b039091169063eabe1ec290610f6d90339086908690600401611371565b600060405180830381600087803b158015610f8757600080fd5b505af1158015610f9b573d6000803e3d6000fd5b505060408051858152602081018590523393507fde3ca466246b0da455138dbea78dacd91d3c40dc98d5846ff0193bf67c24b0e79250015b60405180910390a2610fe56001600055565b5050565b610ff1611206565b60028111156110425760405162461bcd60e51b815260206004820152601d60248201527f43616e206f6e6c7920747261646520666f7220746f6b656e7320302d320000006044820152606401610192565b60018054604051627eeac760e11b81526001600160a01b039091169062fdd58e906110739033908790600401611252565b602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b4919061126b565b10156111025760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420746f6b656e20746f20747261646500000000006044820152606401610192565b6001805460405163755f0f6160e11b81526001600160a01b039091169163eabe1ec291611136913391879190600401611371565b600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b505060018054604051635567843160e11b81526001600160a01b03909116935063aacf0862925061119c913391869190600401611371565b600060405180830381600087803b1580156111b657600080fd5b505af11580156111ca573d6000803e3d6000fd5b505060408051858152602081018590523393507f3091f4e05dc693cbc5f916a74ce5a6209820f4ff3dc4f93767d1fa26f46f16d6925001610fd3565b60026000540361122957604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000806040838503121561124357600080fd5b50508035926020909101359150565b6001600160a01b03929092168252602082015260400190565b60006020828403121561127d57600080fd5b5051919050565b6020808252601490820152730496e73756666696369656e7420746f6b656e20360641b604082015260600190565b602080825260149082015273496e73756666696369656e7420746f6b656e203160601b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156113265781518752958201959082019060010161130a565b509495945050505050565b6001600160a01b0384168152606060208201819052600090611355908301856112f6565b828103604084015261136781856112f6565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60208082526014908201527324b739bab33334b1b4b2b73a103a37b5b2b7101960611b60408201526060019056fe840f6faaae0a65cf4d73e02d5c54ba8456146308222048325931949d78dfb887a2646970667358221220ad475e0d6b778f7e2e96518d41ff1873c1004c8b46dd13f916a8d640f201c0a564736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/TokenForge.sol:TokenForge",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 126,
        "contract": "contracts/TokenForge.sol:TokenForge",
        "label": "tokenContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IForgeableERC1155)121"
      }
    ],
    "types": {
      "t_contract(IForgeableERC1155)121": {
        "encoding": "inplace",
        "label": "contract IForgeableERC1155",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}