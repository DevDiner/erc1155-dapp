{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/TokenForge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface IForgeableERC1155 {\n    function forgeMint(address to, uint256 tokenId, uint256 amount) external;\n    function forgeMintBatch(address to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\n    function forgeBurn(address from, uint256 tokenId, uint256 amount) external;\n    function forgeBurnBatch(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n}\n\ncontract TokenForge is ReentrancyGuard {\n    IForgeableERC1155 public tokenContract;\n\n    // --- EVENTS ---\n    event TokenForged(address indexed user, uint256 forgedTokenId, string forgeType);\n    event TokenTraded(address indexed user, uint256 tradedTokenId, uint256 baseTokenId);\n    event TokenBurned(address indexed user, uint256 burnedTokenId, uint256 amount);\n\n    constructor(address _tokenContract) {\n        tokenContract = IForgeableERC1155(_tokenContract);\n    }\n\n    // Forge Token 3\n    function forgeToken3() external nonReentrant {\n        require(tokenContract.balanceOf(msg.sender, 0) >= 1, \"Insufficient token 0\");\n        require(tokenContract.balanceOf(msg.sender, 1) >= 1, \"Insufficient token 1\");\n\n        uint256[] memory burnIds = new uint256[](2);\n        uint256[] memory burnAmounts = new uint256[](2);\n        burnIds[0] = 0; burnIds[1] = 1;\n        burnAmounts[0] = 1; burnAmounts[1] = 1;\n\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\n        tokenContract.forgeMint(msg.sender, 3, 1);\n        emit TokenForged(msg.sender, 3, \"forge3\");\n    }\n\n    // Forge Token 4\n    function forgeToken4() external nonReentrant {\n        require(tokenContract.balanceOf(msg.sender, 1) >= 1, \"Insufficient token 1\");\n        require(tokenContract.balanceOf(msg.sender, 2) >= 1, \"Insufficient token 2\");\n\n        uint256[] memory burnIds = new uint256[](2);\n        uint256[] memory burnAmounts = new uint256[](2);\n        burnIds[0] = 1; burnIds[1] = 2;\n        burnAmounts[0] = 1; burnAmounts[1] = 1;\n\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\n        tokenContract.forgeMint(msg.sender, 4, 1);\n        emit TokenForged(msg.sender, 4, \"forge4\");\n    }\n\n    // Forge Token 5\n    function forgeToken5() external nonReentrant {\n        require(tokenContract.balanceOf(msg.sender, 0) >= 1, \"Insufficient token 0\");\n        require(tokenContract.balanceOf(msg.sender, 2) >= 1, \"Insufficient token 2\");\n\n        uint256[] memory burnIds = new uint256[](2);\n        uint256[] memory burnAmounts = new uint256[](2);\n        burnIds[0] = 0; burnIds[1] = 2;\n        burnAmounts[0] = 1; burnAmounts[1] = 1;\n\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\n        tokenContract.forgeMint(msg.sender, 5, 1);\n        emit TokenForged(msg.sender, 5, \"forge5\");\n    }\n\n    // Forge Token 6\n    function forgeToken6() external nonReentrant {\n        require(tokenContract.balanceOf(msg.sender, 0) >= 1, \"Insufficient token 0\");\n        require(tokenContract.balanceOf(msg.sender, 1) >= 1, \"Insufficient token 1\");\n        require(tokenContract.balanceOf(msg.sender, 2) >= 1, \"Insufficient token 2\");\n\n        uint256[] memory burnIds = new uint256[](3);\n        uint256[] memory burnAmounts = new uint256[](3);\n        burnIds[0] = 0; burnIds[1] = 1; burnIds[2] = 2;\n        burnAmounts[0] = 1; burnAmounts[1] = 1; burnAmounts[2] = 1;\n\n        tokenContract.forgeBurnBatch(msg.sender, burnIds, burnAmounts);\n        tokenContract.forgeMint(msg.sender, 6, 1);\n        emit TokenForged(msg.sender, 6, \"forge6\");\n    }\n\n    // Trade any token for a base token (0-2)\n    function tradeForBase(uint256 tokenToTrade, uint256 baseTokenId) external nonReentrant {\n        require(baseTokenId <= 2, \"Can only trade for tokens 0-2\");\n        require(tokenContract.balanceOf(msg.sender, tokenToTrade) >= 1, \"Insufficient token to trade\");\n\n        tokenContract.forgeBurn(msg.sender, tokenToTrade, 1);\n        tokenContract.forgeMint(msg.sender, baseTokenId, 1);\n        emit TokenTraded(msg.sender, tokenToTrade, baseTokenId);\n    }\n\n    // Direct burn function for tokens [3â€“6] for nothing\n    function burnToken(uint256 tokenId, uint256 amount) external nonReentrant {\n        require(tokenId >= 3 && tokenId <= 6, \"Only tokens 3-6 can be burned directly\");\n        require(tokenContract.balanceOf(msg.sender, tokenId) >= amount, \"Insufficient tokens to burn\");\n\n        tokenContract.forgeBurn(msg.sender, tokenId, amount);\n        emit TokenBurned(msg.sender, tokenId, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}